import { gql, type GraphQLClient } from 'graphql-request'
import type * as Types from './graphql'


export function getContentType(client: GraphQLClient, variables: Types.getContentTypeQueryVariables) : Promise<Types.getContentTypeQuery>
{
  const query = gql`query getContentType($key: String!, $version: String, $locale: [Locales!], $path: String, $domain: String) { content: _Content( where: {_or: [{_metadata: {key: {eq: $key}, version: {eq: $version}}}, {_metadata: {url: {hierarchical: {eq: $path}, base: {eq: $domain}}, version: {eq: $version}}}]} locale: $locale ) { total items: item { _metadata { types } } } }`
  return client.request<Types.getContentTypeQuery, Types.getContentTypeQueryVariables>(query, variables)
}
export function getContentByPath(client: GraphQLClient, variables: Types.getContentByPathQueryVariables) : Promise<Types.getContentByPathQuery>
{
  const query = gql`query getContentByPath($path: [String!]!, $locale: [Locales!], $siteId: String) { content: _Content( where: {_metadata: {url: {default: {in: $path}, base: {eq: $siteId}}}} locale: $locale ) { total items: item { ...IContentData ...PageData ...MyStandardPageData ...BlankExperienceData } } } fragment MyStandardPageData on MyStandardPage { Header Burlp { json html } } fragment BlankExperienceData on BlankExperience { SeoSettings { ...PageSeoSettingsPropertyData } BlankExperienceSeoSettings { ...PageSeoSettingsPropertyData } ...ExperienceData } fragment IContentData on _IContent { _metadata { ...IContentInfo } _type: __typename } fragment PageData on _IContent { ...IContentData } fragment PageSeoSettingsPropertyData on PageSeoSettingsProperty { MetaTitle MetaDescription SharingImage { ...ReferenceData } GraphType } fragment ExperienceData on _IExperience { composition { ...CompositionNodeData nodes { ...CompositionNodeData ... on ICompositionStructureNode { nodes { ...CompositionNodeData ... on ICompositionStructureNode { nodes { ...CompositionNodeData ... on ICompositionStructureNode { nodes { ...CompositionNodeData ...CompositionComponentNodeData } } } } } } ...CompositionComponentNodeData } } } fragment ReferenceData on ContentReference { key url { ...LinkData } } fragment LinkData on ContentUrl { base default } fragment CompositionNodeData on ICompositionNode { name: displayName layoutType: nodeType type key template: displayTemplateKey settings: displaySettings { key value } } fragment CompositionComponentNodeData on ICompositionComponentNode { component { ...BlockData ...ElementData ...ButtonBlockData ...CardBlockData ...DictionaryData ...DictionaryItemData ...HeaderBlockData ...LayoutContainerBlockData ...MegaMenuGroupBlockData ...NavigationMenuBlockData ...OfficeLocationData ...PageSeoSettingsData ...WebsiteFooterData } } fragment ButtonBlockData on ButtonBlock { text link { ...LinkData } ButtonText ButtonUrl { ...LinkData } ButtonClass ButtonType ButtonVariant className variant } fragment CardBlockData on CardBlock { CardHeading CardSubHeading CardDescription { json html } CardColor CardButton { ...ButtonBlockPropertyData } CardImageLayout CardIcon { ...ReferenceData } ImageLayout CardImage { ...ReferenceData } } fragment DictionaryData on Dictionary { empty: _metadata { key } } fragment DictionaryItemData on DictionaryItem { DictionaryItemKey DictionaryItemValue } fragment HeaderBlockData on HeaderBlock { empty: _metadata { key } } fragment LayoutContainerBlockData on LayoutContainerBlock { ColumnsCount GapSize LayoutContentArea { ...IContentListItem } ContainerBackgroundColor ContainerBackgroundImage { ...ReferenceData } ContainerMarginTop ContainerMarginBottom ContainerPaddingBottom ContainerPaddingTop } fragment MegaMenuGroupBlockData on MegaMenuGroupBlock { MenuMenuHeading MegaMenuUrl { ...LinkData } MegaMenuContentArea { ...IContentListItem } } fragment NavigationMenuBlockData on NavigationMenuBlock { MenuNavigationHeading NavigationLinks { ...LinkItemData } } fragment OfficeLocationData on OfficeLocation { OfficeTitle OfficeAddressStreet1 OfficeAddressStreet2 OfficeAddressCity OfficeAddressPostalCode OfficeAddressCountry OfficePhone OfficeEmail } fragment PageSeoSettingsData on PageSeoSettings { MetaTitle MetaDescription SharingImage { ...ReferenceData } GraphType } fragment WebsiteFooterData on WebsiteFooter { FooterMainOfficeLocation { ...IContentListItem } FooterFirstLinkList { ...NavigationMenuBlockPropertyData } FooterSecondLinkList { ...NavigationMenuBlockPropertyData } FooterThirdLinkList { ...NavigationMenuBlockPropertyData } FooterLogo { ...ReferenceData } FooterLogoAltText FooterLegalLinks { ...LinkItemData } } fragment ElementData on _IComponent { ...IElementData } fragment BlockData on _IComponent { ...IContentData } fragment ButtonBlockPropertyData on ButtonBlockProperty { text link { ...LinkData } ButtonText ButtonUrl { ...LinkData } ButtonClass ButtonType ButtonVariant className variant } fragment IContentListItem on _IContent { ...IContentData } fragment LinkItemData on Link { title text target url { ...LinkData } } fragment NavigationMenuBlockPropertyData on NavigationMenuBlockProperty { MenuNavigationHeading NavigationLinks { ...LinkItemData } } fragment IElementData on _IComponent { _metadata { ...IContentInfo } _type: __typename } fragment IContentInfo on IContentMetadata { key locale types displayName version url { ...LinkData } }`
  return client.request<Types.getContentByPathQuery, Types.getContentByPathQueryVariables>(query, variables)
}
export function getContentById(client: GraphQLClient, variables: Types.getContentByIdQueryVariables) : Promise<Types.getContentByIdQuery>
{
  const query = gql`query getContentById($key: String!, $version: String, $locale: [Locales!], $path: String, $domain: String) { content: _Content( where: {_or: [{_metadata: {key: {eq: $key}, version: {eq: $version}}}, {_metadata: {url: {hierarchical: {eq: $path}, base: {eq: $domain}}, version: {eq: $version}}}]} locale: $locale ) { total items: item { ...BlockData ...PageData ...ButtonBlockData ...CardBlockData ...DictionaryData ...DictionaryItemData ...HeaderBlockData ...LayoutContainerBlockData ...MegaMenuGroupBlockData ...NavigationMenuBlockData ...OfficeLocationData ...PageSeoSettingsData ...WebsiteFooterData ...MyStandardPageData ...BlankExperienceData } } } fragment ButtonBlockData on ButtonBlock { text link { ...LinkData } ButtonText ButtonUrl { ...LinkData } ButtonClass ButtonType ButtonVariant className variant } fragment CardBlockData on CardBlock { CardHeading CardSubHeading CardDescription { json html } CardColor CardButton { ...ButtonBlockPropertyData } CardImageLayout CardIcon { ...ReferenceData } ImageLayout CardImage { ...ReferenceData } } fragment DictionaryData on Dictionary { empty: _metadata { key } } fragment DictionaryItemData on DictionaryItem { DictionaryItemKey DictionaryItemValue } fragment HeaderBlockData on HeaderBlock { empty: _metadata { key } } fragment LayoutContainerBlockData on LayoutContainerBlock { ColumnsCount GapSize LayoutContentArea { ...IContentListItem } ContainerBackgroundColor ContainerBackgroundImage { ...ReferenceData } ContainerMarginTop ContainerMarginBottom ContainerPaddingBottom ContainerPaddingTop } fragment MegaMenuGroupBlockData on MegaMenuGroupBlock { MenuMenuHeading MegaMenuUrl { ...LinkData } MegaMenuContentArea { ...IContentListItem } } fragment NavigationMenuBlockData on NavigationMenuBlock { MenuNavigationHeading NavigationLinks { ...LinkItemData } } fragment OfficeLocationData on OfficeLocation { OfficeTitle OfficeAddressStreet1 OfficeAddressStreet2 OfficeAddressCity OfficeAddressPostalCode OfficeAddressCountry OfficePhone OfficeEmail } fragment PageSeoSettingsData on PageSeoSettings { MetaTitle MetaDescription SharingImage { ...ReferenceData } GraphType } fragment WebsiteFooterData on WebsiteFooter { FooterMainOfficeLocation { ...IContentListItem } FooterFirstLinkList { ...NavigationMenuBlockPropertyData } FooterSecondLinkList { ...NavigationMenuBlockPropertyData } FooterThirdLinkList { ...NavigationMenuBlockPropertyData } FooterLogo { ...ReferenceData } FooterLogoAltText FooterLegalLinks { ...LinkItemData } } fragment MyStandardPageData on MyStandardPage { Header Burlp { json html } } fragment BlankExperienceData on BlankExperience { SeoSettings { ...PageSeoSettingsPropertyData } BlankExperienceSeoSettings { ...PageSeoSettingsPropertyData } ...ExperienceData } fragment BlockData on _IComponent { ...IContentData } fragment PageData on _IContent { ...IContentData } fragment LinkData on ContentUrl { base default } fragment ButtonBlockPropertyData on ButtonBlockProperty { text link { ...LinkData } ButtonText ButtonUrl { ...LinkData } ButtonClass ButtonType ButtonVariant className variant } fragment ReferenceData on ContentReference { key url { ...LinkData } } fragment IContentListItem on _IContent { ...IContentData } fragment IContentData on _IContent { _metadata { ...IContentInfo } _type: __typename } fragment IContentInfo on IContentMetadata { key locale types displayName version url { ...LinkData } } fragment LinkItemData on Link { title text target url { ...LinkData } } fragment NavigationMenuBlockPropertyData on NavigationMenuBlockProperty { MenuNavigationHeading NavigationLinks { ...LinkItemData } } fragment PageSeoSettingsPropertyData on PageSeoSettingsProperty { MetaTitle MetaDescription SharingImage { ...ReferenceData } GraphType } fragment ExperienceData on _IExperience { composition { ...CompositionNodeData nodes { ...CompositionNodeData ... on ICompositionStructureNode { nodes { ...CompositionNodeData ... on ICompositionStructureNode { nodes { ...CompositionNodeData ... on ICompositionStructureNode { nodes { ...CompositionNodeData ...CompositionComponentNodeData } } } } } } ...CompositionComponentNodeData } } } fragment CompositionNodeData on ICompositionNode { name: displayName layoutType: nodeType type key template: displayTemplateKey settings: displaySettings { key value } } fragment CompositionComponentNodeData on ICompositionComponentNode { component { ...BlockData ...ElementData ...ButtonBlockData ...CardBlockData ...DictionaryData ...DictionaryItemData ...HeaderBlockData ...LayoutContainerBlockData ...MegaMenuGroupBlockData ...NavigationMenuBlockData ...OfficeLocationData ...PageSeoSettingsData ...WebsiteFooterData } } fragment ElementData on _IComponent { ...IElementData } fragment IElementData on _IComponent { _metadata { ...IContentInfo } _type: __typename }`
  return client.request<Types.getContentByIdQuery, Types.getContentByIdQueryVariables>(query, variables)
}

