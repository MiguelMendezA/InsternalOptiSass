import { gql, type GraphQLClient } from 'graphql-request'
import type * as Types from './graphql'


export function getContentType(client: GraphQLClient, variables: Types.getContentTypeQueryVariables) : Promise<Types.getContentTypeQuery>
{
  const query = gql`query getContentType($key: String!, $version: String, $locale: [Locales!], $path: String, $domain: String) { content: _Content( where: {_or: [{_metadata: {key: {eq: $key}, version: {eq: $version}}}, {_metadata: {url: {hierarchical: {eq: $path}, base: {eq: $domain}}, version: {eq: $version}}}]} locale: $locale ) { total items: item { _metadata { types } } } }`
  return client.request<Types.getContentTypeQuery, Types.getContentTypeQueryVariables>(query, variables)
}
export function getContentByPath(client: GraphQLClient, variables: Types.getContentByPathQueryVariables) : Promise<Types.getContentByPathQuery>
{
  const query = gql`query getContentByPath($path: [String!]!, $locale: [Locales!], $siteId: String) { content: _Content( where: {_metadata: {url: {default: {in: $path}, base: {eq: $siteId}}}} locale: $locale ) { total items: item { ...IContentData ...PageData ...BlankExperienceData } } } fragment BlankExperienceData on BlankExperience { ...ExperienceData } fragment IContentData on _IContent { _metadata { ...IContentInfo } _type: __typename } fragment PageData on _IContent { ...IContentData } fragment ExperienceData on _IExperience { composition { ...CompositionNodeData nodes { ...CompositionNodeData ... on ICompositionStructureNode { nodes { ...CompositionNodeData ... on ICompositionStructureNode { nodes { ...CompositionNodeData ... on ICompositionStructureNode { nodes { ...CompositionNodeData ...CompositionComponentNodeData } } } } } } ...CompositionComponentNodeData } } } fragment CompositionNodeData on ICompositionNode { name: displayName layoutType: nodeType type key template: displayTemplateKey settings: displaySettings { key value } } fragment CompositionComponentNodeData on ICompositionComponentNode { component { ...BlockData ...ElementData } } fragment ElementData on _IComponent { ...IElementData } fragment BlockData on _IComponent { ...IContentData } fragment IElementData on _IComponent { _metadata { ...IContentInfo } _type: __typename } fragment IContentInfo on IContentMetadata { key locale types displayName version url { ...LinkData } } fragment LinkData on ContentUrl { base default }`
  return client.request<Types.getContentByPathQuery, Types.getContentByPathQueryVariables>(query, variables)
}
export function getContentById(client: GraphQLClient, variables: Types.getContentByIdQueryVariables) : Promise<Types.getContentByIdQuery>
{
  const query = gql`query getContentById($key: String!, $version: String, $locale: [Locales!], $path: String, $domain: String) { content: _Content( where: {_or: [{_metadata: {key: {eq: $key}, version: {eq: $version}}}, {_metadata: {url: {hierarchical: {eq: $path}, base: {eq: $domain}}, version: {eq: $version}}}]} locale: $locale ) { total items: item { ...BlockData ...PageData ...BlankExperienceData } } } fragment BlankExperienceData on BlankExperience { ...ExperienceData } fragment BlockData on _IComponent { ...IContentData } fragment PageData on _IContent { ...IContentData } fragment ExperienceData on _IExperience { composition { ...CompositionNodeData nodes { ...CompositionNodeData ... on ICompositionStructureNode { nodes { ...CompositionNodeData ... on ICompositionStructureNode { nodes { ...CompositionNodeData ... on ICompositionStructureNode { nodes { ...CompositionNodeData ...CompositionComponentNodeData } } } } } } ...CompositionComponentNodeData } } } fragment CompositionNodeData on ICompositionNode { name: displayName layoutType: nodeType type key template: displayTemplateKey settings: displaySettings { key value } } fragment CompositionComponentNodeData on ICompositionComponentNode { component { ...BlockData ...ElementData } } fragment ElementData on _IComponent { ...IElementData } fragment IElementData on _IComponent { _metadata { ...IContentInfo } _type: __typename } fragment IContentInfo on IContentMetadata { key locale types displayName version url { ...LinkData } } fragment LinkData on ContentUrl { base default } fragment IContentData on _IContent { _metadata { ...IContentInfo } _type: __typename }`
  return client.request<Types.getContentByIdQuery, Types.getContentByIdQueryVariables>(query, variables)
}

